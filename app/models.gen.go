// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package app

import (
	"go.uber.org/zap"

	"github.com/dashotv/grimoire"
	"github.com/kamva/mgm/v3"
)

func init() {
	initializers = append(initializers, setupDb)
	healthchecks["db"] = checkDb
}

func setupDb(app *Application) error {
	db, err := NewConnector(app)
	if err != nil {
		return err
	}

	app.DB = db
	return nil
}

func checkDb(app *Application) (err error) {
	// TODO: Check DB connection
	return nil
}

type Connector struct {
	Log *zap.SugaredLogger
}

func connection[T mgm.Model](name string) (*grimoire.Store[T], error) {
	s, err := app.Config.ConnectionFor(name)
	if err != nil {
		return nil, err
	}
	c, err := grimoire.New[T](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}
	return c, nil
}

func NewConnector(app *Application) (*Connector, error) {

	c := &Connector{
		Log: app.Log.Named("db"),
	}

	return c, nil
}

type SearchAllResponse struct { // struct
	Media *SearchResponse `bson:"media" json:"media"`
	Tmdb  *SearchResponse `bson:"tmdb" json:"tmdb"`
	Tvdb  *SearchResponse `bson:"tvdb" json:"tvdb"`
}

type SearchResponse struct { // struct
	Results []*SearchResult `bson:"results" json:"results"`
	Error   string          `bson:"error" json:"error"`
}

type SearchResult struct { // struct
	ID          string `bson:"id" json:"id"`
	Title       string `bson:"title" json:"title"`
	Description string `bson:"description" json:"description"`
	Type        string `bson:"type" json:"type"`
	Kind        string `bson:"kind" json:"kind"`
	Date        string `bson:"date" json:"date"`
	Source      string `bson:"source" json:"source"`
	Image       string `bson:"image" json:"image"`
	Completed   bool   `bson:"completed" json:"completed"`
}
