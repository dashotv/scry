// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package app

import (
	"context"
	"fmt"
	"net/http"

	"github.com/dashotv/fae"
	"github.com/dashotv/golem/plugins/router"
	"github.com/labstack/echo/v4"
)

func init() {
	initializers = append(initializers, setupRoutes)
	healthchecks["routes"] = checkRoutes
	starters = append(starters, startRoutes)
}

func checkRoutes(app *Application) error {
	// TODO: check routes
	return nil
}

func startRoutes(ctx context.Context, app *Application) error {
	go func() {
		app.Routes()
		app.Log.Info("starting routes...")
		if err := app.Engine.Start(fmt.Sprintf(":%d", app.Config.Port)); err != nil {
			app.Log.Errorf("routes: %s", err)
		}
	}()
	return nil
}

func setupRoutes(app *Application) error {
	logger := app.Log.Named("routes").Desugar()
	e, err := router.New(logger)
	if err != nil {
		return fae.Wrap(err, "router plugin")
	}
	app.Engine = e
	// unauthenticated routes
	app.Default = app.Engine.Group("")
	// authenticated routes (if enabled, otherwise same as default)
	app.Router = app.Engine.Group("")

	// TODO: fix auth
	if app.Config.Auth {
		clerkSecret := app.Config.ClerkSecretKey
		if clerkSecret == "" {
			app.Log.Fatal("CLERK_SECRET_KEY is not set")
		}
		clerkToken := app.Config.ClerkToken
		if clerkToken == "" {
			app.Log.Fatal("CLERK_TOKEN is not set")
		}

		app.Router.Use(router.ClerkAuth(clerkSecret, clerkToken))
	}

	return nil
}

type Setting struct {
	Name  string `json:"name"`
	Value bool   `json:"value"`
}

type SettingsBatch struct {
	IDs   []string `json:"ids"`
	Name  string   `json:"name"`
	Value bool     `json:"value"`
}

type Response struct {
	Error   bool        `json:"error"`
	Message string      `json:"message,omitempty"`
	Result  interface{} `json:"result,omitempty"`
	Total   int64       `json:"total,omitempty"`
}

func (a *Application) Routes() {
	a.Default.GET("/", a.indexHandler)
	a.Default.GET("/health", a.healthHandler)

	es := a.Router.Group("/es")
	es.GET("/", a.EsIndexHandler)
	es.GET("/media", a.EsMediaHandler)
	es.GET("/release", a.EsReleaseHandler)

	media := a.Router.Group("/media")
	media.GET("/", a.MediaIndexHandler)

	nzbs := a.Router.Group("/nzbs")
	nzbs.GET("/movie", a.NzbsMovieHandler)
	nzbs.GET("/tv", a.NzbsTvHandler)

	releases := a.Router.Group("/releases")
	releases.GET("/", a.ReleasesIndexHandler)

	runic := a.Router.Group("/runic")
	runic.GET("/", a.RunicIndexHandler)

	search := a.Router.Group("/search")
	search.GET("/", a.SearchIndexHandler)

}

func (a *Application) indexHandler(c echo.Context) error {
	return c.JSON(http.StatusOK, H{
		"name": "scry",
		"routes": H{
			"es":       "/es",
			"media":    "/media",
			"nzbs":     "/nzbs",
			"releases": "/releases",
			"runic":    "/runic",
			"search":   "/search",
		},
	})
}

func (a *Application) healthHandler(c echo.Context) error {
	health, err := a.Health()
	if err != nil {
		return err
	}
	return c.JSON(http.StatusOK, H{"name": "scry", "health": health})
}

// Es (/es)
func (a *Application) EsIndexHandler(c echo.Context) error {
	return a.EsIndex(c)
}
func (a *Application) EsMediaHandler(c echo.Context) error {
	return a.EsMedia(c)
}
func (a *Application) EsReleaseHandler(c echo.Context) error {
	return a.EsRelease(c)
}

// Media (/media)
func (a *Application) MediaIndexHandler(c echo.Context) error {
	return a.MediaIndex(c)
}

// Nzbs (/nzbs)
func (a *Application) NzbsMovieHandler(c echo.Context) error {
	return a.NzbsMovie(c)
}
func (a *Application) NzbsTvHandler(c echo.Context) error {
	return a.NzbsTv(c)
}

// Releases (/releases)
func (a *Application) ReleasesIndexHandler(c echo.Context) error {
	return a.ReleasesIndex(c)
}

// Runic (/runic)
func (a *Application) RunicIndexHandler(c echo.Context) error {
	return a.RunicIndex(c)
}

// Search (/search)
func (a *Application) SearchIndexHandler(c echo.Context) error {
	return a.SearchIndex(c)
}
