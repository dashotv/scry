// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package client

import (
	"context"

	"github.com/dashotv/fae"
	"github.com/dashotv/scry/nzbgeek"
)

type NzbsService struct {
	client *Client
}

// NewNzbs makes a new client for accessing Nzbs services.
func NewNzbsService(client *Client) *NzbsService {
	return &NzbsService{
		client: client,
	}
}

type NzbsMovieResponse struct {
	*Response
	Result []nzbgeek.SearchResult `json:"result"`
}

func (s *NzbsService) Movie(ctx context.Context) (*NzbsMovieResponse, error) {
	result := &NzbsMovieResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetResult(result).
		Get("/nzbs/movie")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type NzbsTvResponse struct {
	*Response
	Result []nzbgeek.SearchResult `json:"result"`
}

func (s *NzbsService) Tv(ctx context.Context) (*NzbsTvResponse, error) {
	result := &NzbsTvResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetResult(result).
		Get("/nzbs/tv")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}
