// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package client

import (
	"context"
	"fmt"

	"github.com/dashotv/fae"
	"github.com/olivere/elastic"
)

type EsService struct {
	client *Client
}

// NewEs makes a new client for accessing Es services.
func NewEsService(client *Client) *EsService {
	return &EsService{
		client: client,
	}
}

func (s *EsService) Index(ctx context.Context) (*Response, error) {
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetResult(result).
		Get("/es/")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type EsMediaResponse struct {
	*Response
	Result *elastic.IndexResponse `json:"result"`
}

func (s *EsService) Media(ctx context.Context) (*EsMediaResponse, error) {
	result := &EsMediaResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetResult(result).
		Get("/es/media")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type EsDeleteRequest struct {
	Index string `json:"index"`
}

func (s *EsService) Delete(ctx context.Context, req *EsDeleteRequest) (*Response, error) {
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetPathParam("index", fmt.Sprintf("%v", req.Index)).
		Delete("/es/{index}")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}
