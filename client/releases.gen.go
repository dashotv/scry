// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package client

import (
	"context"
	"fmt"

	"github.com/dashotv/fae"
	"github.com/dashotv/scry/search"
)

type ReleasesService struct {
	client *Client
}

// NewReleases makes a new client for accessing Releases services.
func NewReleasesService(client *Client) *ReleasesService {
	return &ReleasesService{
		client: client,
	}
}

type ReleasesIndexRequest struct {
	Start      int    `json:"start"`
	Limit      int    `json:"limit"`
	Type       string `json:"type"`
	Text       string `json:"text"`
	Year       int    `json:"year"`
	Season     int    `json:"season"`
	Episode    int    `json:"episode"`
	Group      string `json:"group"`
	Author     string `json:"author"`
	Resolution int    `json:"resolution"`
	Source     string `json:"source"`
	Uncensored bool   `json:"uncensored"`
	Bluray     bool   `json:"bluray"`
	Verified   bool   `json:"verified"`
	Exact      bool   `json:"exact"`
}

type ReleasesIndexResponse struct {
	*Response
	Result *search.ReleaseSearchResponse `json:"result"`
	Total  int64                         `json:"total"`
}

func (s *ReleasesService) Index(ctx context.Context, req *ReleasesIndexRequest) (*ReleasesIndexResponse, error) {
	result := &ReleasesIndexResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("start", fmt.Sprintf("%v", req.Start)).
		SetQueryParam("limit", fmt.Sprintf("%v", req.Limit)).
		SetQueryParam("type", fmt.Sprintf("%v", req.Type)).
		SetQueryParam("text", fmt.Sprintf("%v", req.Text)).
		SetQueryParam("year", fmt.Sprintf("%v", req.Year)).
		SetQueryParam("season", fmt.Sprintf("%v", req.Season)).
		SetQueryParam("episode", fmt.Sprintf("%v", req.Episode)).
		SetQueryParam("group", fmt.Sprintf("%v", req.Group)).
		SetQueryParam("author", fmt.Sprintf("%v", req.Author)).
		SetQueryParam("resolution", fmt.Sprintf("%v", req.Resolution)).
		SetQueryParam("source", fmt.Sprintf("%v", req.Source)).
		SetQueryParam("uncensored", fmt.Sprintf("%v", req.Uncensored)).
		SetQueryParam("bluray", fmt.Sprintf("%v", req.Bluray)).
		SetQueryParam("verified", fmt.Sprintf("%v", req.Verified)).
		SetQueryParam("exact", fmt.Sprintf("%v", req.Exact)).
		Get("/releases/")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}
