// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package client

import (
	"context"
	"fmt"

	"github.com/dashotv/fae"
)

type SearchService struct {
	client *Client
}

// NewSearch makes a new client for accessing Search services.
func NewSearchService(client *Client) *SearchService {
	return &SearchService{
		client: client,
	}
}

type SearchIndexRequest struct {
	Start int    `json:"start"`
	Limit int    `json:"limit"`
	Types string `json:"types"`
	Q     string `json:"q"`
	Name  string `json:"name"`
}

type SearchIndexResponse struct {
	*Response
	Result *SearchAllResponse `json:"result"`
	Total  int64              `json:"total"`
}

func (s *SearchService) Index(ctx context.Context, req *SearchIndexRequest) (*SearchIndexResponse, error) {
	result := &SearchIndexResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("start", fmt.Sprintf("%v", req.Start)).
		SetQueryParam("limit", fmt.Sprintf("%v", req.Limit)).
		SetQueryParam("types", fmt.Sprintf("%v", req.Types)).
		SetQueryParam("q", fmt.Sprintf("%v", req.Q)).
		SetQueryParam("name", fmt.Sprintf("%v", req.Name)).
		Get("/search/")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}
