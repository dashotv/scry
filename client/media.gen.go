// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package client

import (
	"context"
	"fmt"

	"github.com/dashotv/fae"
	"github.com/dashotv/scry/search"
)

type MediaService struct {
	client *Client
}

// NewMedia makes a new client for accessing Media services.
func NewMediaService(client *Client) *MediaService {
	return &MediaService{
		client: client,
	}
}

type MediaIndexRequest struct {
	Start      int    `json:"start"`
	Limit      int    `json:"limit"`
	Type       string `json:"type"`
	Name       string `json:"name"`
	Display    string `json:"display"`
	Title      string `json:"title"`
	Source     string `json:"source"`
	SourceID   string `json:"source_id"`
	Season     int    `json:"season"`
	Episode    int    `json:"episode"`
	Absolute   int    `json:"absolute"`
	Downloaded string `json:"downloaded"`
	Completed  string `json:"completed"`
	Skipped    string `json:"skipped"`
}

type MediaIndexResponse struct {
	*Response
	Result *search.MediaSearchResponse `json:"result"`
	Total  int64                       `json:"total"`
}

func (s *MediaService) Index(ctx context.Context, req *MediaIndexRequest) (*MediaIndexResponse, error) {
	result := &MediaIndexResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("start", fmt.Sprintf("%v", req.Start)).
		SetQueryParam("limit", fmt.Sprintf("%v", req.Limit)).
		SetQueryParam("type", fmt.Sprintf("%v", req.Type)).
		SetQueryParam("name", fmt.Sprintf("%v", req.Name)).
		SetQueryParam("display", fmt.Sprintf("%v", req.Display)).
		SetQueryParam("title", fmt.Sprintf("%v", req.Title)).
		SetQueryParam("source", fmt.Sprintf("%v", req.Source)).
		SetQueryParam("source_id", fmt.Sprintf("%v", req.SourceID)).
		SetQueryParam("season", fmt.Sprintf("%v", req.Season)).
		SetQueryParam("episode", fmt.Sprintf("%v", req.Episode)).
		SetQueryParam("absolute", fmt.Sprintf("%v", req.Absolute)).
		SetQueryParam("downloaded", fmt.Sprintf("%v", req.Downloaded)).
		SetQueryParam("completed", fmt.Sprintf("%v", req.Completed)).
		SetQueryParam("skipped", fmt.Sprintf("%v", req.Skipped)).
		Get("/media/")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}
